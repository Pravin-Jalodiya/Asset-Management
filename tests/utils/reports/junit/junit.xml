<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="1" time="0.922" timestamp="2024-12-23T08:19:56.428779+05:30" hostname="Pravins-MacBook-Air.local"><testcase classname="tests.utils.test_utils.TestUtils" name="test_admin_decorator_authorized" time="0.004"><failure message="AssertionError: {'status_code': &lt;ErrorCodes.INVALID_TOKEN[61 chars]ble'} != 'Authorized'">self = &lt;tests.utils.test_utils.TestUtils testMethod=test_admin_decorator_authorized&gt;

    def test_admin_decorator_authorized(self):
        """
        Test admin decorator with authorized access
        """
        # Create a Flask app context for testing
        app = Flask(__name__)
        with app.app_context():
            # Set up g with admin role
            g.role = Role.ADMIN.value
    
            # Mock function to be decorated
            @Utils.admin
            def test_function():
                return "Authorized"
    
            # Call the decorated function
            result = test_function()
&gt;           self.assertEqual(result, "Authorized")

app        = &lt;Flask 'tests.utils.test_utils'&gt;
result     = {'message': 'Request context not available',
 'status_code': &lt;ErrorCodes.INVALID_TOKEN_PAYLOAD_ERROR: 4008&gt;}
self       = &lt;tests.utils.test_utils.TestUtils testMethod=test_admin_decorator_authorized&gt;
test_function = &lt;function TestUtils.test_admin_decorator_authorized.&lt;locals&gt;.test_function at 0x105b79da0&gt;

test_utils.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Applications/PyCharm.app/Contents/plugins/python/helpers/pycharm/teamcity/diff_tools.py:33: in _patched_equals
    old(self, first, second, msg)
E   AssertionError: {'status_code': &lt;ErrorCodes.INVALID_TOKEN[61 chars]ble'} != 'Authorized'
        error      = EqualsAssertionError({'status_code': &lt;ErrorCodes.INVALID_TOKEN_PAYLOAD_ERROR: 4008&gt;, 'message': 'Request context not available'}, 'Authorized', None)
        first      = {'message': 'Request context not available',
 'status_code': &lt;ErrorCodes.INVALID_TOKEN_PAYLOAD_ERROR: 4008&gt;}
        msg        = None
        old        = &lt;function TestCase.assertEqual at 0x102f2d9e0&gt;
        second     = 'Authorized'
        self       = &lt;tests.utils.test_utils.TestUtils testMethod=test_admin_decorator_authorized&gt;
        store_exception = &lt;function store_exception at 0x105b7a7a0&gt;
        test_filter = None</failure></testcase></testsuite></testsuites>