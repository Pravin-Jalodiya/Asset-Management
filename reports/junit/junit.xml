<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="8" skipped="0" tests="155" time="2.868" timestamp="2024-12-23T09:23:14.424269+05:30" hostname="Pravins-MacBook-Air.local"><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_get_assets_success" time="0.003" /><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_get_assets_database_error" time="0.001" /><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_add_asset_success" time="0.001" /><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_add_asset_exists_error" time="0.001" /><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_delete_asset_success" time="0.001" /><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_delete_asset_not_found" time="0.002" /><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_assign_asset_success" time="0.003" /><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_assign_asset_already_assigned" time="0.001" /><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_unassign_asset_success" time="0.001" /><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_unassign_asset_not_assigned" time="0.001" /><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_assigned_assets_success" time="0.001" /><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_assigned_all_assets_success" time="0.001" /><testcase classname="tests.controllers_tests.test_asset_issue_handlers.TestIssueHandler" name="test_get_user_issues_success" time="0.001" /><testcase classname="tests.controllers_tests.test_asset_issue_handlers.TestIssueHandler" name="test_get_user_issues_user_not_found" time="0.001" /><testcase classname="tests.controllers_tests.test_asset_issue_handlers.TestIssueHandler" name="test_get_user_issues_database_error" time="0.001" /><testcase classname="tests.controllers_tests.test_asset_issue_handlers.TestIssueHandler" name="test_get_issues_success" time="0.001" /><testcase classname="tests.controllers_tests.test_asset_issue_handlers.TestIssueHandler" name="test_get_issues_database_error" time="0.001" /><testcase classname="tests.controllers_tests.test_asset_issue_handlers.TestIssueHandler" name="test_report_issue_success" time="0.001" /><testcase classname="tests.controllers_tests.test_asset_issue_handlers.TestIssueHandler" name="test_report_issue_not_assigned_error" time="0.001" /><testcase classname="tests.controllers_tests.test_asset_issue_handlers.TestIssueHandler" name="test_report_issue_asset_not_found" time="0.001" /><testcase classname="tests.controllers_tests.test_asset_issue_handlers.TestIssueHandler" name="test_report_issue_database_error" time="0.001" /><testcase classname="tests.controllers_tests.test_auth_handlers.TestAuthHandler" name="test_signup_success" time="0.001" /><testcase classname="tests.controllers_tests.test_auth_handlers.TestAuthHandler" name="test_signup_user_exists" time="0.001" /><testcase classname="tests.controllers_tests.test_auth_handlers.TestAuthHandler" name="test_signup_database_error" time="0.001" /><testcase classname="tests.controllers_tests.test_auth_handlers.TestAuthHandler" name="test_login_success" time="0.001" /><testcase classname="tests.controllers_tests.test_auth_handlers.TestAuthHandler" name="test_login_invalid_credentials" time="0.001" /><testcase classname="tests.controllers_tests.test_main.TestAppFactory" name="test_all_routes_registered" time="0.013"><failure message="AttributeError: 'FastAPI' object has no attribute 'test_request_context'">self = &lt;tests.controllers_tests.test_main.TestAppFactory testMethod=test_all_routes_registered&gt;

    def test_all_routes_registered(self):
        """
        Verify that all expected routes are registered
        """
        # Arrange
        app = create_app()
    
        # Expected route prefixes
        expected_routes = [
        ]
    
        # Act &amp; Assert
&gt;       with app.test_request_context():
E       AttributeError: 'FastAPI' object has no attribute 'test_request_context'

app        = &lt;fastapi.applications.FastAPI object at 0x112247010&gt;
expected_routes = []
self       = &lt;tests.controllers_tests.test_main.TestAppFactory testMethod=test_all_routes_registered&gt;

tests/controllers_tests/test_main.py:67: AttributeError</failure></testcase><testcase classname="tests.controllers_tests.test_main.TestAppFactory" name="test_create_app_returns_flask_app" time="0.011"><failure message="AssertionError: &lt;fastapi.applications.FastAPI object at 0x11224d750&gt; is not an instance of &lt;class 'flask.app.Flask'&gt;">self = &lt;tests.controllers_tests.test_main.TestAppFactory testMethod=test_create_app_returns_flask_app&gt;

    def test_create_app_returns_flask_app(self):
        """
        Test that create_app returns a Flask application
        """
        # Act
        app = create_app()
    
        # Assert
&gt;       self.assertIsInstance(app, Flask)
E       AssertionError: &lt;fastapi.applications.FastAPI object at 0x11224d750&gt; is not an instance of &lt;class 'flask.app.Flask'&gt;

app        = &lt;fastapi.applications.FastAPI object at 0x11224d750&gt;
self       = &lt;tests.controllers_tests.test_main.TestAppFactory testMethod=test_create_app_returns_flask_app&gt;

tests/controllers_tests/test_main.py:15: AssertionError</failure></testcase><testcase classname="tests.controllers_tests.test_main.TestAppFactory" name="test_database_initialized" time="0.010" /><testcase classname="tests.controllers_tests.test_main.TestAppFactory" name="test_dependencies_are_created" time="0.010" /><testcase classname="tests.controllers_tests.test_main.TestAppFactory" name="test_services_have_correct_dependencies" time="0.036" /><testcase classname="tests.controllers_tests.test_user_handlers.TestUserHandler" name="test_get_user_success" time="0.001" /><testcase classname="tests.controllers_tests.test_user_handlers.TestUserHandler" name="test_get_user_not_found" time="0.001" /><testcase classname="tests.controllers_tests.test_user_handlers.TestUserHandler" name="test_get_users_success" time="0.001" /><testcase classname="tests.controllers_tests.test_user_handlers.TestUserHandler" name="test_get_users_database_error" time="0.001" /><testcase classname="tests.controllers_tests.test_user_handlers.TestUserHandler" name="test_delete_user_success" time="0.001" /><testcase classname="tests.controllers_tests.test_user_handlers.TestUserHandler" name="test_delete_user_not_found" time="0.001" /><testcase classname="tests.middleware_tests.test_middleware.TestAuthMiddleware" name="test_expired_token" time="0.000" /><testcase classname="tests.middleware_tests.test_middleware.TestAuthMiddleware" name="test_invalid_token" time="0.000" /><testcase classname="tests.middleware_tests.test_middleware.TestAuthMiddleware" name="test_invalid_token_payload" time="0.000" /><testcase classname="tests.middleware_tests.test_middleware.TestAuthMiddleware" name="test_skip_middleware_for_login_signup" time="0.000" /><testcase classname="tests.middleware_tests.test_middleware.TestAuthMiddleware" name="test_valid_token" time="0.000" /><testcase classname="tests.repository_tests.test_asset_issue_repository.TestIssueRepository" name="test_fetch_all_issues_empty_list" time="0.004" /><testcase classname="tests.repository_tests.test_asset_issue_repository.TestIssueRepository" name="test_fetch_all_issues_raises_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_asset_issue_repository.TestIssueRepository" name="test_fetch_all_issues_success" time="0.002" /><testcase classname="tests.repository_tests.test_asset_issue_repository.TestIssueRepository" name="test_fetch_user_issues_no_issues_found" time="0.002" /><testcase classname="tests.repository_tests.test_asset_issue_repository.TestIssueRepository" name="test_fetch_user_issues_raises_database_error" time="0.001" /><testcase classname="tests.repository_tests.test_asset_issue_repository.TestIssueRepository" name="test_fetch_user_issues_success" time="0.002" /><testcase classname="tests.repository_tests.test_asset_issue_repository.TestIssueRepository" name="test_report_issue_raises_database_error" time="0.001" /><testcase classname="tests.repository_tests.test_asset_issue_repository.TestIssueRepository" name="test_report_issue_success" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_add_asset_raises_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_add_asset_success" time="0.003" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_assign_asset_raises_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_assign_asset_success" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_check_asset_availability_available" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_check_asset_availability_available_raises_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_check_asset_availability_not_available" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_delete_asset_success" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_delete_asset_success_raises_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_fetch_all_assets_raises_database_error" time="0.003" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_fetch_all_assets_success" time="0.003" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_fetch_asset_by_id_not_found" time="0.003" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_fetch_asset_by_id_raises_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_fetch_asset_by_id_success" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_is_asset_assigned_false" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_is_asset_assigned_raises_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_is_asset_assigned_true" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_unassign_asset_raises_database_error" time="0.003" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_unassign_asset_success" time="0.003" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_update_asset_status_raises_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_update_asset_status_success" time="0.003" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_view_all_assigned_assets_raises_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_view_all_assigned_assets_success" time="0.003" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_view_assigned_assets_no_assets" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_view_assigned_assets_no_assets_raises_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_view_assigned_assets_success" time="0.003" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_delete_user_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_delete_user_not_found" time="0.002" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_delete_user_success" time="0.003" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_fetch_user_by_email_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_fetch_user_by_email_not_found" time="0.002" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_fetch_user_by_email_success" time="0.003" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_fetch_user_by_id_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_fetch_user_by_id_not_found" time="0.004" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_fetch_user_by_id_success" time="0.003" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_fetch_users_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_fetch_users_empty_list" time="0.003" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_fetch_users_success" time="0.003" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_save_user_database_error" time="0.001" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_save_user_success" time="0.003" /><testcase classname="tests.service_tests.test_asset_issue_service.TestIssueService" name="test_get_issues_returns_all_issues" time="0.003" /><testcase classname="tests.service_tests.test_asset_issue_service.TestIssueService" name="test_get_user_issues_raises_error_for_nonexistent_user" time="0.003" /><testcase classname="tests.service_tests.test_asset_issue_service.TestIssueService" name="test_get_user_issues_returns_user_specific_issues" time="0.002" /><testcase classname="tests.service_tests.test_asset_issue_service.TestIssueService" name="test_report_issue_raises_error_for_nonexistent_asset" time="0.005"><failure message="TypeError: IssueService.report_issue() missing 1 required positional argument: 'issue'">self = &lt;tests.service_tests.test_asset_issue_service.TestIssueService testMethod=test_report_issue_raises_error_for_nonexistent_asset&gt;

    def test_report_issue_raises_error_for_nonexistent_asset(self):
        # Arrange
        user_id = "user1"
        asset_id = "nonexistent_asset"
        with self.app.test_request_context():
            g.user_id = user_id
    
            issue = Issue(
                asset_id=asset_id,
                description="Test issue description",
                user_id=None,
            )
    
            self.mock_asset_service.get_asset_by_id.return_value = None
    
            # Act &amp; Assert
            with self.assertRaises(NotExistsError) as context:
&gt;               self.issue_service.report_issue(issue)
E               TypeError: IssueService.report_issue() missing 1 required positional argument: 'issue'

asset_id   = 'nonexistent_asset'
context    = &lt;unittest.case._AssertRaisesContext object at 0x1125a0bd0&gt;
issue      = Issue()
self       = &lt;tests.service_tests.test_asset_issue_service.TestIssueService testMethod=test_report_issue_raises_error_for_nonexistent_asset&gt;
user_id    = 'user1'

tests/service_tests/test_asset_issue_service.py:149: TypeError</failure></testcase><testcase classname="tests.service_tests.test_asset_issue_service.TestIssueService" name="test_report_issue_raises_error_for_unassigned_asset" time="0.002"><failure message="TypeError: IssueService.report_issue() missing 1 required positional argument: 'issue'">self = &lt;tests.service_tests.test_asset_issue_service.TestIssueService testMethod=test_report_issue_raises_error_for_unassigned_asset&gt;

    def test_report_issue_raises_error_for_unassigned_asset(self):
        # Arrange
        user_id = "user1"
        asset_id = "asset1"
        with self.app.test_request_context():
            g.user_id = user_id
    
            issue = Issue(
                asset_id=asset_id,
                description="Test issue description",
                user_id=None,
            )
    
            self.mock_asset_service.get_asset_by_id.return_value = {"id": asset_id}
            self.mock_asset_service.is_asset_assigned.return_value = False
    
            # Act &amp; Assert
            with self.assertRaises(NotAssignedError) as context:
&gt;               self.issue_service.report_issue(issue)
E               TypeError: IssueService.report_issue() missing 1 required positional argument: 'issue'

asset_id   = 'asset1'
context    = &lt;unittest.case._AssertRaisesContext object at 0x1124faed0&gt;
issue      = Issue()
self       = &lt;tests.service_tests.test_asset_issue_service.TestIssueService testMethod=test_report_issue_raises_error_for_unassigned_asset&gt;
user_id    = 'user1'

tests/service_tests/test_asset_issue_service.py:174: TypeError</failure></testcase><testcase classname="tests.service_tests.test_asset_issue_service.TestIssueService" name="test_report_issue_successful" time="0.002"><failure message="TypeError: IssueService.report_issue() missing 1 required positional argument: 'issue'">self = &lt;tests.service_tests.test_asset_issue_service.TestIssueService testMethod=test_report_issue_successful&gt;

    def test_report_issue_successful(self):
        # Arrange
        user_id = "user1"
        asset_id = "asset1"
        with self.app.test_request_context():
            g.user_id = user_id  # Set user_id in Flask g context
    
            issue = Issue(
                asset_id=asset_id,
                description="Test issue description",
                user_id=None,
            )
    
            self.mock_asset_service.get_asset_by_id.return_value = {"id": asset_id}
            self.mock_asset_service.is_asset_assigned.return_value = True
            self.mock_issue_repository.report_issue.return_value = issue
    
            # Act
&gt;           result = self.issue_service.report_issue(issue)
E           TypeError: IssueService.report_issue() missing 1 required positional argument: 'issue'

asset_id   = 'asset1'
issue      = Issue()
self       = &lt;tests.service_tests.test_asset_issue_service.TestIssueService testMethod=test_report_issue_successful&gt;
user_id    = 'user1'

tests/service_tests/test_asset_issue_service.py:121: TypeError</failure></testcase><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_add_asset_raises_exists_error" time="0.001" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_add_asset_successful" time="0.001" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_assign_asset_raises_asset_not_exists_error" time="0.001" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_assign_asset_raises_user_not_exists_error" time="0.001" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_assign_asset_successful" time="0.002" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_delete_asset_raises_not_exists_error" time="0.001" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_delete_asset_successful" time="0.001" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_get_asset_by_id" time="0.001" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_get_assets" time="0.001" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_is_asset_assigned" time="0.001" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_unassign_asset_raises_not_exists_errors" time="0.001" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_unassign_asset_successful" time="0.002" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_view_all_assigned_assets" time="0.001" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_view_assigned_assets_raises_user_not_exists_error" time="0.001" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_view_assigned_assets_successful" time="0.001" /><testcase classname="tests.service_tests.test_user_service.TestUserService" name="test_delete_user_account_nonexistent_user" time="0.001"><failure message="src.app.utils.errors.error.NotExistsError: User does not exist">self = &lt;tests.service_tests.test_user_service.TestUserService testMethod=test_delete_user_account_nonexistent_user&gt;

    def test_delete_user_account_nonexistent_user(self):
        """
        Test delete user account for non-existent user
        """
        # Arrange
        user_id = str(uuid.uuid4())
    
        # Simulate no user found
        self.mock_user_repository.fetch_user_by_id.return_value = None
    
        # Act
&gt;       result = self.user_service.delete_user_account(user_id)

self       = &lt;tests.service_tests.test_user_service.TestUserService testMethod=test_delete_user_account_nonexistent_user&gt;
user_id    = '4ace5fe9-9c8b-4496-8bb7-f2963f7f0000'

tests/service_tests/test_user_service.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;src.app.services.user_service.UserService object at 0x11260b290&gt;, user_id = '4ace5fe9-9c8b-4496-8bb7-f2963f7f0000'

    def delete_user_account(self, user_id: str) -&gt; bool:
        """
        Delete user account
        - Verify user exists before deletion
        """
        user = self.get_user_by_id(user_id)
        if user:
            return self.user_repository.delete_user(user_id)
&gt;       raise NotExistsError("User does not exist")
E       src.app.utils.errors.error.NotExistsError: User does not exist

self       = &lt;src.app.services.user_service.UserService object at 0x11260b290&gt;
user       = None
user_id    = '4ace5fe9-9c8b-4496-8bb7-f2963f7f0000'

src/app/services/user_service.py:52: NotExistsError</failure></testcase><testcase classname="tests.service_tests.test_user_service.TestUserService" name="test_delete_user_account_successful" time="0.001" /><testcase classname="tests.service_tests.test_user_service.TestUserService" name="test_get_user_by_email_returns_none" time="0.001" /><testcase classname="tests.service_tests.test_user_service.TestUserService" name="test_get_user_by_email_successful" time="0.001" /><testcase classname="tests.service_tests.test_user_service.TestUserService" name="test_get_user_by_id_returns_none" time="0.001" /><testcase classname="tests.service_tests.test_user_service.TestUserService" name="test_get_user_by_id_successful" time="0.001" /><testcase classname="tests.service_tests.test_user_service.TestUserService" name="test_get_users_returns_empty_list" time="0.001" /><testcase classname="tests.service_tests.test_user_service.TestUserService" name="test_get_users_returns_list" time="0.001" /><testcase classname="tests.service_tests.test_user_service.TestUserService" name="test_login_user_raises_invalid_credentials" time="0.001" /><testcase classname="tests.service_tests.test_user_service.TestUserService" name="test_login_user_successful" time="0.248" /><testcase classname="tests.service_tests.test_user_service.TestUserService" name="test_signup_user_raises_user_exists_error" time="0.001" /><testcase classname="tests.service_tests.test_user_service.TestUserService" name="test_signup_user_successful" time="0.001" /><testcase classname="tests.utils.db.test_db_connection" name="test_db_connection" time="0.001" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_delete_multiple_conditions" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_delete_single_condition" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_delete_without_where_clause" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_insert_multiple_columns" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_insert_single_column" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_select_all_columns" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_select_specific_columns" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_select_with_all_parameters" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_select_with_limit" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_select_with_multiple_where_conditions" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_select_with_order_by" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_select_with_where_clause" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_update_multiple_columns" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_update_multiple_where_conditions" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_update_single_column" time="0.000" /><testcase classname="tests.utils.test_utils.TestUtils" name="test_admin_decorator_authorized" time="0.000" /><testcase classname="tests.utils.test_utils.TestUtils" name="test_admin_decorator_no_request" time="0.000"><failure message="AssertionError: 4008 != &lt;ErrorCodes.INVALID_TOKEN_PAYLOAD_ERROR: 4008&gt;">self = &lt;tests.utils.test_utils.TestUtils testMethod=test_admin_decorator_no_request&gt;

    def test_admin_decorator_no_request(self):
        """
        Test admin decorator when request context is not available
        """
        # Mock function to be decorated
        @Utils.admin
        def test_function():
            return "Authorized"
    
        # Run the function directly (no async needed)
        result = test_function()
    
        # Check for invalid token payload error
&gt;       self.assertEqual(result["status_code"], ErrorCodes.INVALID_TOKEN_PAYLOAD_ERROR)
E       AssertionError: 4008 != &lt;ErrorCodes.INVALID_TOKEN_PAYLOAD_ERROR: 4008&gt;

result     = {'message': 'Request context not available', 'status_code': 4008}
self       = &lt;tests.utils.test_utils.TestUtils testMethod=test_admin_decorator_no_request&gt;
test_function = &lt;function TestUtils.test_admin_decorator_no_request.&lt;locals&gt;.test_function at 0x1126507c0&gt;

tests/utils/test_utils.py:175: AssertionError</failure></testcase><testcase classname="tests.utils.test_utils.TestUtils" name="test_admin_decorator_unauthorized" time="0.001"><failure message="AssertionError: 4102 != &lt;ErrorCodes.UNAUTHORIZED_ACCESS_ERROR: 4102&gt;">self = &lt;tests.utils.test_utils.TestUtils testMethod=test_admin_decorator_unauthorized&gt;

    def test_admin_decorator_unauthorized(self):
        """
        Test admin decorator with unauthorized access
        """
        # Create a mock request with non-admin user
        mock_scope = {
            "type": "http",
            "headers": [],
            "method": "GET",
            "path": "/",
            "query_string": b"",
            "client": ("127.0.0.1", 8000),
        }
        mock_request = Request(mock_scope)
        mock_request.state.user = {"role": "user"}
    
        # Mock function to be decorated
        @Utils.admin
        def test_function(request: Request):
            return "Authorized"
    
        # Run the function directly
        result = test_function(mock_request)
    
        # Check for unauthorized response
&gt;       self.assertEqual(result["status_code"], ErrorCodes.UNAUTHORIZED_ACCESS_ERROR)
E       AssertionError: 4102 != &lt;ErrorCodes.UNAUTHORIZED_ACCESS_ERROR: 4102&gt;

mock_request = &lt;starlette.requests.Request object at 0x1124ea290&gt;
mock_scope = {'client': ('127.0.0.1', 8000), 'headers': [], 'method': 'GET', 'path': '/', ...}
result     = {'message': 'Admin access required', 'status_code': 4102}
self       = &lt;tests.utils.test_utils.TestUtils testMethod=test_admin_decorator_unauthorized&gt;
test_function = &lt;function TestUtils.test_admin_decorator_unauthorized.&lt;locals&gt;.test_function at 0x112650e00&gt;

tests/utils/test_utils.py:159: AssertionError</failure></testcase><testcase classname="tests.utils.test_utils.TestUtils" name="test_check_password_failure" time="0.468" /><testcase classname="tests.utils.test_utils.TestUtils" name="test_check_password_success" time="0.478" /><testcase classname="tests.utils.test_utils.TestUtils" name="test_create_jwt_token_exception" time="0.001" /><testcase classname="tests.utils.test_utils.TestUtils" name="test_create_jwt_token_success" time="0.000" /><testcase classname="tests.utils.test_utils.TestUtils" name="test_decode_jwt_token_expired" time="0.000" /><testcase classname="tests.utils.test_utils.TestUtils" name="test_decode_jwt_token_invalid" time="0.000" /><testcase classname="tests.utils.test_utils.TestUtils" name="test_decode_jwt_token_success" time="0.000" /><testcase classname="tests.utils.test_utils.TestUtils" name="test_hash_password_unique" time="0.474" /><testcase classname="tests.utils.validators.test_validators.TestValidators" name="test_is_department_valid" time="0.001" /><testcase classname="tests.utils.validators.test_validators.TestValidators" name="test_is_email_valid" time="0.000" /><testcase classname="tests.utils.validators.test_validators.TestValidators" name="test_is_name_valid" time="0.000" /><testcase classname="tests.utils.validators.test_validators.TestValidators" name="test_is_password_valid" time="0.000" /><testcase classname="tests.utils.validators.test_validators.TestValidators" name="test_is_valid_UUID" time="0.000" /></testsuite></testsuites>