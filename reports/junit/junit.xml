<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="46" skipped="0" tests="169" time="3.178" timestamp="2024-12-22T16:46:47.502501+05:30" hostname="Pravins-MacBook-Air.local"><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_add_asset_invalid_data" time="0.006"><failure message="TypeError: cannot unpack non-iterable coroutine object">self = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_add_asset_invalid_data&gt;

    def test_add_asset_invalid_data(self):
        """Test failure when adding an asset with invalid data."""
        with self.app.test_request_context(method="POST", json=self.invalid_asset_payload):
            # Mock the add_asset method to raise an exception
            self.mock_asset_service.add_asset.side_effect = Exception("Invalid data")
    
            # Call the add_asset method of AssetHandler
            g.role = 'admin'
&gt;           response, status_code = self.asset_handler.add_asset()
E           TypeError: cannot unpack non-iterable coroutine object

self       = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_add_asset_invalid_data&gt;

tests/controllers_tests/test_asset_handlers.py:62: TypeError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_add_asset_success" time="0.003"><failure message="TypeError: cannot unpack non-iterable coroutine object">self = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_add_asset_success&gt;

    def test_add_asset_success(self):
        """Test successful addition of an asset."""
        with self.app.test_request_context(method="POST", json=self.valid_asset_payload):
            # Mocking the add_asset method of AssetService
            self.mock_asset_service.add_asset.return_value = self.test_asset
    
            # Call the add_asset method of AssetHandler
            g.role = 'admin'
&gt;           response, status_code = self.asset_handler.add_asset()
E           TypeError: cannot unpack non-iterable coroutine object

self       = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_add_asset_success&gt;

tests/controllers_tests/test_asset_handlers.py:47: TypeError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_assign_asset_already_assigned" time="0.003"><failure message="TypeError: cannot unpack non-iterable coroutine object">self = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_assign_asset_already_assigned&gt;

    def test_assign_asset_already_assigned(self):
        """Test failure when assigning an already assigned asset."""
        user_id = str(uuid.uuid4())
        asset_id = str(uuid.uuid4())
        assign_payload = {"user_id": user_id, "asset_id": asset_id}
        with self.app.test_request_context(method="POST", json=assign_payload):
            # Mock the assign_asset method to raise AlreadyAssignedError
            self.mock_asset_service.assign_asset.side_effect = AlreadyAssignedError("Asset already assigned")
    
            # Call the assign_asset method of AssetHandler
            g.role = 'admin'
&gt;           response, status_code = self.asset_handler.assign_asset()
E           TypeError: cannot unpack non-iterable coroutine object

asset_id   = 'e841dc4b-7707-462f-b475-1fb6f6adb38d'
assign_payload = {'asset_id': 'e841dc4b-7707-462f-b475-1fb6f6adb38d', 'user_id': '4bbef1b3-bd3a-482d-8f72-46d1a6ba593b'}
self       = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_assign_asset_already_assigned&gt;
user_id    = '4bbef1b3-bd3a-482d-8f72-46d1a6ba593b'

tests/controllers_tests/test_asset_handlers.py:123: TypeError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_assign_asset_success" time="0.002"><failure message="TypeError: cannot unpack non-iterable coroutine object">self = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_assign_asset_success&gt;

    def test_assign_asset_success(self):
        """Test successful assignment of an asset."""
        user_id = str(uuid.uuid4())
        asset_id = str(uuid.uuid4())
        assign_payload = {"user_id": user_id, "asset_id": asset_id}
        with self.app.test_request_context(method="POST", json=assign_payload):
            # Mocking the assign_asset method of AssetService
            self.mock_asset_service.assign_asset.return_value = None
    
            # Call the assign_asset method of AssetHandler
            g.role = 'admin'
&gt;           response, status_code = self.asset_handler.assign_asset()
E           TypeError: cannot unpack non-iterable coroutine object

asset_id   = '3797468a-b4ec-4b0b-b698-f395d5859907'
assign_payload = {'asset_id': '3797468a-b4ec-4b0b-b698-f395d5859907', 'user_id': 'd5778532-cc46-4da0-95fd-4b2195b6fcac'}
self       = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_assign_asset_success&gt;
user_id    = 'd5778532-cc46-4da0-95fd-4b2195b6fcac'

tests/controllers_tests/test_asset_handlers.py:105: TypeError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_assigned_all_assets_database_error" time="0.002"><failure message="TypeError: cannot unpack non-iterable coroutine object">self = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_assigned_all_assets_database_error&gt;

    def test_assigned_all_assets_database_error(self):
        """Test all assigned assets retrieval with database error."""
        with self.app.test_request_context(method="GET"):
            # Ensure g.role is set for admin access
            g.role = 'admin'
    
            # Mock the view_all_assigned_assets method to raise DatabaseError
            self.mock_asset_service.view_all_assigned_assets.side_effect = DatabaseError("Database error")
    
&gt;           response, status_code = self.asset_handler.assigned_all_assets()
E           TypeError: cannot unpack non-iterable coroutine object

self       = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_assigned_all_assets_database_error&gt;

tests/controllers_tests/test_asset_handlers.py:442: TypeError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_assigned_all_assets_success" time="0.002"><failure message="TypeError: cannot unpack non-iterable coroutine object">self = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_assigned_all_assets_success&gt;

    def test_assigned_all_assets_success(self):
        """Test successful retrieval of all assigned assets."""
        dummy_assets = [
            {"id": str(uuid.uuid4()), "name": "Asset 1", "user_id": str(uuid.uuid4())},
            {"id": str(uuid.uuid4()), "name": "Asset 2", "user_id": str(uuid.uuid4())}
        ]
    
        with self.app.test_request_context(method="GET"):
            # Ensure g.role is set for admin access
            g.role = 'admin'
    
            # Mock the view_all_assigned_assets method to return dummy assets
            self.mock_asset_service.view_all_assigned_assets.return_value = dummy_assets
    
&gt;           response, status_code = self.asset_handler.assigned_all_assets()
E           TypeError: cannot unpack non-iterable coroutine object

dummy_assets = [{'id': '66c1cef7-7eee-449d-a34c-862673c38ebe', 'name': 'Asset 1', 'user_id': '72802464-285e-4ab2-9571-eda886211736'}, {'id': '361a80bc-3a69-4187-a182-2d761bcf1a62', 'name': 'Asset 2', 'user_id': 'cb041444-ddda-490e-9ce5-d3df80e46a8b'}]
self       = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_assigned_all_assets_success&gt;

tests/controllers_tests/test_asset_handlers.py:425: TypeError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_assigned_all_assets_unexpected_error" time="0.002"><failure message="TypeError: cannot unpack non-iterable coroutine object">self = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_assigned_all_assets_unexpected_error&gt;

    def test_assigned_all_assets_unexpected_error(self):
        """Test all assigned assets retrieval with unexpected error."""
        with self.app.test_request_context(method="GET"):
            # Ensure g.role is set for admin access
            g.role = 'admin'
    
            # Mock the view_all_assigned_assets method to raise an unexpected exception
            self.mock_asset_service.view_all_assigned_assets.side_effect = Exception("Unexpected error")
    
&gt;           response, status_code = self.asset_handler.assigned_all_assets()
E           TypeError: cannot unpack non-iterable coroutine object

self       = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_assigned_all_assets_unexpected_error&gt;

tests/controllers_tests/test_asset_handlers.py:458: TypeError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_assigned_assets_database_error" time="0.003"><failure message="TypeError: cannot unpack non-iterable coroutine object">self = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_assigned_assets_database_error&gt;

    def test_assigned_assets_database_error(self):
        """Test assigned assets retrieval with database error."""
        user_id = str(uuid.uuid4())
    
        with self.app.test_request_context(method="GET"):
            # Mock the view_assigned_assets method to raise DatabaseError
            self.mock_asset_service.view_assigned_assets.side_effect = DatabaseError("Database error")
    
&gt;           response, status_code = self.asset_handler.assigned_assets(user_id)
E           TypeError: cannot unpack non-iterable coroutine object

self       = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_assigned_assets_database_error&gt;
user_id    = '1c4c40f2-6dbb-4fbc-b648-414b03ed7971'

tests/controllers_tests/test_asset_handlers.py:404: TypeError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_assigned_assets_invalid_uuid" time="0.002"><failure message="TypeError: cannot unpack non-iterable coroutine object">self = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_assigned_assets_invalid_uuid&gt;

    def test_assigned_assets_invalid_uuid(self):
        """Test assigned assets retrieval with invalid UUID."""
        invalid_user_ids = [
            "invalid-uuid",
            "",
            "12345"
        ]
    
        for user_id in invalid_user_ids:
            with self.app.test_request_context(method="GET"):
&gt;               response, status_code = self.asset_handler.assigned_assets(user_id)
E               TypeError: cannot unpack non-iterable coroutine object

invalid_user_ids = ['invalid-uuid', '', '12345']
self       = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_assigned_assets_invalid_uuid&gt;
user_id    = 'invalid-uuid'

tests/controllers_tests/test_asset_handlers.py:374: TypeError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_assigned_assets_not_exists" time="0.002"><failure message="TypeError: cannot unpack non-iterable coroutine object">self = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_assigned_assets_not_exists&gt;

    def test_assigned_assets_not_exists(self):
        """Test assigned assets retrieval for non-existent user."""
        user_id = str(uuid.uuid4())
    
        with self.app.test_request_context(method="GET"):
            # Mock the view_assigned_assets method to raise NotExistsError
            self.mock_asset_service.view_assigned_assets.side_effect = NotExistsError("User not found")
    
&gt;           response, status_code = self.asset_handler.assigned_assets(user_id)
E           TypeError: cannot unpack non-iterable coroutine object

self       = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_assigned_assets_not_exists&gt;
user_id    = 'bcf8ae10-5e93-43b7-8b2a-49bc9ceea0a0'

tests/controllers_tests/test_asset_handlers.py:389: TypeError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_assigned_assets_success" time="0.002"><failure message="TypeError: cannot unpack non-iterable coroutine object">self = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_assigned_assets_success&gt;

    def test_assigned_assets_success(self):
        """Test successful retrieval of assigned assets for a user."""
        user_id = str(uuid.uuid4())
        dummy_assets = [
            {"id": str(uuid.uuid4()), "name": "Asset 1"},
            {"id": str(uuid.uuid4()), "name": "Asset 2"}
        ]
    
        with self.app.test_request_context(method="GET"):
            # Mock the view_assigned_assets method to return dummy assets
            self.mock_asset_service.view_assigned_assets.return_value = dummy_assets
    
&gt;           response, status_code = self.asset_handler.assigned_assets(user_id)
E           TypeError: cannot unpack non-iterable coroutine object

dummy_assets = [{'id': 'fbe81143-f8da-4dc3-8503-5ed715afd6f2', 'name': 'Asset 1'}, {'id': '97fd0601-4e6c-4a7a-94bb-b4c3230e5fdf', 'name': 'Asset 2'}]
self       = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_assigned_assets_success&gt;
user_id    = '06d28cba-a79b-457f-954d-48394617d939'

tests/controllers_tests/test_asset_handlers.py:356: TypeError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_delete_asset_database_error" time="0.002"><failure message="TypeError: cannot unpack non-iterable coroutine object">self = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_delete_asset_database_error&gt;

    def test_delete_asset_database_error(self):
        """Test deletion with database error."""
        asset_id = str(uuid.uuid4())
    
        with self.app.test_request_context(method="DELETE", json={"asset_id": asset_id}):
            # Mock the delete_asset method to raise DatabaseError
            self.mock_asset_service.delete_asset.side_effect = DatabaseError("Database error")
    
            # Ensure g.role is set for admin access
            g.role = 'admin'
    
&gt;           response, status_code = self.asset_handler.delete_asset(asset_id)
E           TypeError: cannot unpack non-iterable coroutine object

asset_id   = 'ba8c198b-4f8a-4935-b890-d928adf82332'
self       = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_delete_asset_database_error&gt;

tests/controllers_tests/test_asset_handlers.py:319: TypeError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_delete_asset_invalid_id" time="0.002"><failure message="TypeError: cannot unpack non-iterable coroutine object">self = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_delete_asset_invalid_id&gt;

    def test_delete_asset_invalid_id(self):
        """Test failure when deleting an asset with an invalid ID."""
        with self.app.test_request_context(method="DELETE", json={"asset_id": "invalid_id"}):
            g.role = 'admin'
&gt;           response, status_code = self.asset_handler.delete_asset("invalid_id")
E           TypeError: cannot unpack non-iterable coroutine object

self       = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_delete_asset_invalid_id&gt;

tests/controllers_tests/test_asset_handlers.py:88: TypeError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_delete_asset_invalid_uuid" time="0.002"><failure message="TypeError: cannot unpack non-iterable coroutine object">self = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_delete_asset_invalid_uuid&gt;

    def test_delete_asset_invalid_uuid(self):
        """Test deletion with invalid UUID."""
        invalid_asset_ids = [
            "invalid-uuid",
            "",
            "12345"
        ]
    
        for asset_id in invalid_asset_ids:
            with self.app.test_request_context(method="DELETE", json={"asset_id": asset_id}):
                # Ensure g.role is set for admin access
                g.role = 'admin'
    
&gt;               response, status_code = self.asset_handler.delete_asset(asset_id)
E               TypeError: cannot unpack non-iterable coroutine object

asset_id   = 'invalid-uuid'
invalid_asset_ids = ['invalid-uuid', '', '12345']
self       = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_delete_asset_invalid_uuid&gt;

tests/controllers_tests/test_asset_handlers.py:283: TypeError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_delete_asset_not_exists" time="0.003"><failure message="TypeError: cannot unpack non-iterable coroutine object">self = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_delete_asset_not_exists&gt;

    def test_delete_asset_not_exists(self):
        """Test deletion of non-existent asset."""
        asset_id = str(uuid.uuid4())
    
        with self.app.test_request_context(method="DELETE", json={"asset_id": asset_id}):
            # Mock the delete_asset method to raise NotExistsError
            self.mock_asset_service.delete_asset.side_effect = NotExistsError("Asset not found")
    
            # Ensure g.role is set for admin access
            g.role = 'admin'
    
&gt;           response, status_code = self.asset_handler.delete_asset(asset_id)
E           TypeError: cannot unpack non-iterable coroutine object

asset_id   = 'd171df3a-d5a0-4d3e-8a8d-334e62711f68'
self       = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_delete_asset_not_exists&gt;

tests/controllers_tests/test_asset_handlers.py:301: TypeError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_delete_asset_success" time="0.002"><failure message="TypeError: cannot unpack non-iterable coroutine object">self = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_delete_asset_success&gt;

    def test_delete_asset_success(self):
        """Test successful deletion of an asset."""
        asset_id = str(uuid.uuid4())
        with self.app.test_request_context(method="DELETE", json={"asset_id": asset_id}):
            # Mocking the delete_asset method of AssetService
            self.mock_asset_service.delete_asset.return_value = self.test_asset
    
            # Call the delete_asset method of AssetHandler
            g.role = 'admin'
&gt;           response, status_code = self.asset_handler.delete_asset(asset_id)
E           TypeError: cannot unpack non-iterable coroutine object

asset_id   = 'f643b34a-0e11-4cd5-92da-fe289b0cddf6'
self       = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_delete_asset_success&gt;

tests/controllers_tests/test_asset_handlers.py:77: TypeError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_delete_asset_unexpected_error" time="0.002"><failure message="TypeError: cannot unpack non-iterable coroutine object">self = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_delete_asset_unexpected_error&gt;

    def test_delete_asset_unexpected_error(self):
        """Test deletion with unexpected error."""
        asset_id = str(uuid.uuid4())
    
        with self.app.test_request_context(method="DELETE", json={"asset_id": asset_id}):
            # Mock the delete_asset method to raise an unexpected exception
            self.mock_asset_service.delete_asset.side_effect = Exception("Unexpected error")
    
            # Ensure g.role is set for admin access
            g.role = 'admin'
    
&gt;           response, status_code = self.asset_handler.delete_asset(asset_id)
E           TypeError: cannot unpack non-iterable coroutine object

asset_id   = '7571520c-7e64-4991-9150-ee56cc2c7040'
self       = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_delete_asset_unexpected_error&gt;

tests/controllers_tests/test_asset_handlers.py:337: TypeError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_get_assets_success" time="0.002"><failure message="TypeError: cannot unpack non-iterable coroutine object">self = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_get_assets_success&gt;

    def test_get_assets_success(self):
        """Test successful retrieval of assets."""
        with self.app.test_request_context(method="GET"):
            # Mock the get_assets method of AssetService
            self.mock_asset_service.get_assets.return_value = [self.test_asset]
    
            # Call the get_assets method of AssetHandler
            g.role = 'admin'
&gt;           response, status_code = self.asset_handler.get_assets()
E           TypeError: cannot unpack non-iterable coroutine object

self       = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_get_assets_success&gt;

tests/controllers_tests/test_asset_handlers.py:170: TypeError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_unassign_asset_database_error" time="0.002"><failure message="TypeError: cannot unpack non-iterable coroutine object">self = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_unassign_asset_database_error&gt;

    def test_unassign_asset_database_error(self):
        """Test unassignment with database error."""
        user_id = str(uuid.uuid4())
        asset_id = str(uuid.uuid4())
        unassign_payload = {"user_id": user_id, "asset_id": asset_id}
    
        with self.app.test_request_context(method="POST", json=unassign_payload):
            # Mock the unassign_asset method to raise DatabaseError
            self.mock_asset_service.unassign_asset.side_effect = DatabaseError("Database operation failed")
    
            # Call the unassign_asset method of AssetHandler
&gt;           response, status_code = self.asset_handler.unassign_asset()
E           TypeError: cannot unpack non-iterable coroutine object

asset_id   = '6e97ef9e-1144-4a1f-9ed6-5e3abf4000f9'
self       = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_unassign_asset_database_error&gt;
unassign_payload = {'asset_id': '6e97ef9e-1144-4a1f-9ed6-5e3abf4000f9', 'user_id': '2b751391-f2fd-48d7-8007-5e2df09e1c47'}
user_id    = '2b751391-f2fd-48d7-8007-5e2df09e1c47'

tests/controllers_tests/test_asset_handlers.py:245: TypeError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_unassign_asset_not_assigned" time="0.002"><failure message="TypeError: cannot unpack non-iterable coroutine object">self = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_unassign_asset_not_assigned&gt;

    def test_unassign_asset_not_assigned(self):
        """Test failure when unassigning a non-assigned asset."""
        user_id = str(uuid.uuid4())
        asset_id = str(uuid.uuid4())
        unassign_payload = {"user_id": user_id, "asset_id": asset_id}
        with self.app.test_request_context(method="POST", json=unassign_payload):
            # Mock the unassign_asset method to raise NotAssignedError
            self.mock_asset_service.unassign_asset.side_effect = NotAssignedError("Asset not assigned")
    
            # Call the unassign_asset method of AssetHandler
&gt;           response, status_code = self.asset_handler.unassign_asset()
E           TypeError: cannot unpack non-iterable coroutine object

asset_id   = '68a0f46b-afa4-49e3-a2cd-8d13f06cbfcf'
self       = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_unassign_asset_not_assigned&gt;
unassign_payload = {'asset_id': '68a0f46b-afa4-49e3-a2cd-8d13f06cbfcf', 'user_id': 'c8392ee7-0cc4-4c94-a2c3-85eb7c24aa9d'}
user_id    = 'c8392ee7-0cc4-4c94-a2c3-85eb7c24aa9d'

tests/controllers_tests/test_asset_handlers.py:156: TypeError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_unassign_asset_not_assigned_error" time="0.002"><failure message="TypeError: cannot unpack non-iterable coroutine object">self = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_unassign_asset_not_assigned_error&gt;

    def test_unassign_asset_not_assigned_error(self):
        """Test unassignment when asset is not assigned."""
        user_id = str(uuid.uuid4())
        asset_id = str(uuid.uuid4())
        unassign_payload = {"user_id": user_id, "asset_id": asset_id}
    
        with self.app.test_request_context(method="POST", json=unassign_payload):
            # Mock the unassign_asset method to raise NotAssignedError
            self.mock_asset_service.unassign_asset.side_effect = NotAssignedError("Asset is not assigned")
    
            # Call the unassign_asset method of AssetHandler
&gt;           response, status_code = self.asset_handler.unassign_asset()
E           TypeError: cannot unpack non-iterable coroutine object

asset_id   = '6173d396-1ddf-44c2-835e-914b2ae9e9c9'
self       = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_unassign_asset_not_assigned_error&gt;
unassign_payload = {'asset_id': '6173d396-1ddf-44c2-835e-914b2ae9e9c9', 'user_id': 'ca814ecd-ea4b-499f-8452-9d2363b128fd'}
user_id    = 'ca814ecd-ea4b-499f-8452-9d2363b128fd'

tests/controllers_tests/test_asset_handlers.py:227: TypeError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_unassign_asset_not_exists_error" time="0.002"><failure message="TypeError: cannot unpack non-iterable coroutine object">self = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_unassign_asset_not_exists_error&gt;

    def test_unassign_asset_not_exists_error(self):
        """Test unassignment when user or asset does not exist."""
        user_id = str(uuid.uuid4())
        asset_id = str(uuid.uuid4())
        unassign_payload = {"user_id": user_id, "asset_id": asset_id}
    
        with self.app.test_request_context(method="POST", json=unassign_payload):
            # Mock the unassign_asset method to raise NotExistsError
            self.mock_asset_service.unassign_asset.side_effect = NotExistsError("User or asset not found")
    
            # Call the unassign_asset method of AssetHandler
&gt;           response, status_code = self.asset_handler.unassign_asset()
E           TypeError: cannot unpack non-iterable coroutine object

asset_id   = '311833dc-2047-4578-8777-9c398eb5f2bb'
self       = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_unassign_asset_not_exists_error&gt;
unassign_payload = {'asset_id': '311833dc-2047-4578-8777-9c398eb5f2bb', 'user_id': 'b7752f1c-22db-49a4-ab77-ec32e069c5f5'}
user_id    = 'b7752f1c-22db-49a4-ab77-ec32e069c5f5'

tests/controllers_tests/test_asset_handlers.py:189: TypeError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_unassign_asset_success" time="0.002"><failure message="TypeError: cannot unpack non-iterable coroutine object">self = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_unassign_asset_success&gt;

    def test_unassign_asset_success(self):
        """Test successful unassignment of an asset."""
        user_id = str(uuid.uuid4())
        asset_id = str(uuid.uuid4())
        unassign_payload = {"user_id": user_id, "asset_id": asset_id}
    
        with self.app.test_request_context(method="POST", json=unassign_payload):
            # Ensure g.role is set
            g.role = 'admin'
    
&gt;           response, status_code = self.asset_handler.unassign_asset()
E           TypeError: cannot unpack non-iterable coroutine object

asset_id   = '7e6704b3-9ded-4f92-b9c1-4fac77490c75'
self       = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_unassign_asset_success&gt;
unassign_payload = {'asset_id': '7e6704b3-9ded-4f92-b9c1-4fac77490c75', 'user_id': '26991258-f1d4-4050-bd41-5ff8b3d314bb'}
user_id    = '26991258-f1d4-4050-bd41-5ff8b3d314bb'

tests/controllers_tests/test_asset_handlers.py:139: TypeError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_unassign_asset_unexpected_error" time="0.002"><failure message="TypeError: cannot unpack non-iterable coroutine object">self = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_unassign_asset_unexpected_error&gt;

    def test_unassign_asset_unexpected_error(self):
        """Test unassignment with an unexpected error."""
        user_id = str(uuid.uuid4())
        asset_id = str(uuid.uuid4())
        unassign_payload = {"user_id": user_id, "asset_id": asset_id}
    
        with self.app.test_request_context(method="POST", json=unassign_payload):
            # Mock the unassign_asset method to raise an unexpected exception
            self.mock_asset_service.unassign_asset.side_effect = Exception("Unexpected error")
    
            # Call the unassign_asset method of AssetHandler
&gt;           response, status_code = self.asset_handler.unassign_asset()
E           TypeError: cannot unpack non-iterable coroutine object

asset_id   = 'a54981b3-6c15-447c-825f-cc9683c5f8c0'
self       = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_unassign_asset_unexpected_error&gt;
unassign_payload = {'asset_id': 'a54981b3-6c15-447c-825f-cc9683c5f8c0', 'user_id': '001e0cab-23df-40b2-a329-d423d4a14604'}
user_id    = '001e0cab-23df-40b2-a329-d423d4a14604'

tests/controllers_tests/test_asset_handlers.py:263: TypeError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_handlers.TestAssetHandler" name="test_unassign_asset_validation_error" time="0.002"><failure message="TypeError: cannot unpack non-iterable coroutine object">self = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_unassign_asset_validation_error&gt;

    def test_unassign_asset_validation_error(self):
        """Test unassignment with invalid input."""
        invalid_payloads = [
            {"user_id": str(uuid.uuid4()), "asset_id": str(uuid.uuid4())},
            {"user_id": str(uuid.uuid4()), "asset_id": str(uuid.uuid4())},
        ]
    
        for unassign_payload in invalid_payloads:
            with self.app.test_request_context(method="POST", json=unassign_payload):
                # Mock the unassign_asset method to raise ValidationError
                self.mock_asset_service.unassign_asset.side_effect = ValidationError("Invalid input")
    
                # Call the unassign_asset method of AssetHandler
&gt;               response, status_code = self.asset_handler.unassign_asset()
E               TypeError: cannot unpack non-iterable coroutine object

invalid_payloads = [{'asset_id': '8d50cec8-74dd-49cc-8dbe-e04cb04a78d3', 'user_id': 'bb48555a-f480-44a9-8d47-9d3e6ed47e77'}, {'asset_id': '3a0bb862-9469-4744-9b29-558eb3cc902a', 'user_id': '9d8bdcd7-e496-425f-9314-0ab5cde14346'}]
self       = &lt;tests.controllers_tests.test_asset_handlers.TestAssetHandler testMethod=test_unassign_asset_validation_error&gt;
unassign_payload = {'asset_id': '8d50cec8-74dd-49cc-8dbe-e04cb04a78d3', 'user_id': 'bb48555a-f480-44a9-8d47-9d3e6ed47e77'}

tests/controllers_tests/test_asset_handlers.py:209: TypeError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_issue_handlers.TestIssueHandler" name="test_get_user_issues_success" time="0.004" /><testcase classname="tests.controllers_tests.test_asset_issue_handlers.TestIssueHandler" name="test_get_user_issues_user_not_found" time="0.001" /><testcase classname="tests.controllers_tests.test_asset_issue_handlers.TestIssueHandler" name="test_get_user_issues_database_error" time="0.001" /><testcase classname="tests.controllers_tests.test_asset_issue_handlers.TestIssueHandler" name="test_get_issues_success" time="0.004"><failure message="assert 4008 == 200">self = &lt;tests.controllers_tests.test_asset_issue_handlers.TestIssueHandler object at 0x1060db2d0&gt;, issue_handler = IssueHandler(issue_service=&lt;Mock id='4399033680'&gt;)
sample_issues = [Issue(), Issue()], mock_request = &lt;MagicMock spec='Request' id='4399676624'&gt;

    @pytest.mark.asyncio
    async def test_get_issues_success(self, issue_handler, sample_issues, mock_request):
    
        issue_handler.issue_service.get_issues.return_value = sample_issues
    
        response = await issue_handler.get_issues(request=mock_request)
    
&gt;       assert response["status_code"] == 200
E       assert 4008 == 200

issue_handler = IssueHandler(issue_service=&lt;Mock id='4399033680'&gt;)
mock_request = &lt;MagicMock spec='Request' id='4399676624'&gt;
response   = {'message': 'Request context not available', 'status_code': 4008}
sample_issues = [Issue(), Issue()]
self       = &lt;tests.controllers_tests.test_asset_issue_handlers.TestIssueHandler object at 0x1060db2d0&gt;

tests/controllers_tests/test_asset_issue_handlers.py:129: AssertionError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_issue_handlers.TestIssueHandler" name="test_get_issues_database_error" time="0.003"><failure message="assert 4008 == 5003">self = &lt;tests.controllers_tests.test_asset_issue_handlers.TestIssueHandler object at 0x1060dbbd0&gt;, issue_handler = IssueHandler(issue_service=&lt;Mock id='4397943120'&gt;)
mock_request = &lt;MagicMock spec='Request' id='4397951824'&gt;

    @pytest.mark.asyncio
    async def test_get_issues_database_error(self, issue_handler, mock_request):
        issue_handler.issue_service.get_issues.side_effect = Exception("Database error")
    
        response = await issue_handler.get_issues(mock_request)
    
&gt;       assert response["status_code"] == DATABASE_OPERATION_ERROR
E       assert 4008 == 5003

issue_handler = IssueHandler(issue_service=&lt;Mock id='4397943120'&gt;)
mock_request = &lt;MagicMock spec='Request' id='4397951824'&gt;
response   = {'message': 'Request context not available', 'status_code': 4008}
self       = &lt;tests.controllers_tests.test_asset_issue_handlers.TestIssueHandler object at 0x1060dbbd0&gt;

tests/controllers_tests/test_asset_issue_handlers.py:141: AssertionError</failure></testcase><testcase classname="tests.controllers_tests.test_asset_issue_handlers.TestIssueHandler" name="test_report_issue_success" time="0.004" /><testcase classname="tests.controllers_tests.test_asset_issue_handlers.TestIssueHandler" name="test_report_issue_not_assigned_error" time="0.003" /><testcase classname="tests.controllers_tests.test_asset_issue_handlers.TestIssueHandler" name="test_report_issue_asset_not_found" time="0.003" /><testcase classname="tests.controllers_tests.test_asset_issue_handlers.TestIssueHandler" name="test_report_issue_database_error" time="0.003" /><testcase classname="tests.controllers_tests.test_main.TestAppFactory" name="test_all_routes_registered" time="0.013"><failure message="AttributeError: 'FastAPI' object has no attribute 'test_request_context'">self = &lt;tests.controllers_tests.test_main.TestAppFactory testMethod=test_all_routes_registered&gt;

    def test_all_routes_registered(self):
        """
        Verify that all expected routes are registered
        """
        # Arrange
        app = create_app()
    
        # Expected route prefixes
        expected_routes = [
        ]
    
        # Act &amp; Assert
&gt;       with app.test_request_context():
E       AttributeError: 'FastAPI' object has no attribute 'test_request_context'

app        = &lt;fastapi.applications.FastAPI object at 0x1063f7e50&gt;
expected_routes = []
self       = &lt;tests.controllers_tests.test_main.TestAppFactory testMethod=test_all_routes_registered&gt;

tests/controllers_tests/test_main.py:67: AttributeError</failure></testcase><testcase classname="tests.controllers_tests.test_main.TestAppFactory" name="test_create_app_returns_flask_app" time="0.010"><failure message="AssertionError: &lt;fastapi.applications.FastAPI object at 0x106281290&gt; is not an instance of &lt;class 'flask.app.Flask'&gt;">self = &lt;tests.controllers_tests.test_main.TestAppFactory testMethod=test_create_app_returns_flask_app&gt;

    def test_create_app_returns_flask_app(self):
        """
        Test that create_app returns a Flask application
        """
        # Act
        app = create_app()
    
        # Assert
&gt;       self.assertIsInstance(app, Flask)
E       AssertionError: &lt;fastapi.applications.FastAPI object at 0x106281290&gt; is not an instance of &lt;class 'flask.app.Flask'&gt;

app        = &lt;fastapi.applications.FastAPI object at 0x106281290&gt;
self       = &lt;tests.controllers_tests.test_main.TestAppFactory testMethod=test_create_app_returns_flask_app&gt;

tests/controllers_tests/test_main.py:15: AssertionError</failure></testcase><testcase classname="tests.controllers_tests.test_main.TestAppFactory" name="test_database_initialized" time="0.011" /><testcase classname="tests.controllers_tests.test_main.TestAppFactory" name="test_dependencies_are_created" time="0.010" /><testcase classname="tests.controllers_tests.test_main.TestAppFactory" name="test_services_have_correct_dependencies" time="0.020" /><testcase classname="tests.controllers_tests.test_user_handlers.TestUserHandler" name="test_signup_success" time="0.005" /><testcase classname="tests.controllers_tests.test_user_handlers.TestUserHandler" name="test_signup_user_exists" time="0.001" /><testcase classname="tests.controllers_tests.test_user_handlers.TestUserHandler" name="test_signup_database_error" time="0.001" /><testcase classname="tests.controllers_tests.test_user_handlers.TestUserHandler" name="test_login_success" time="0.001" /><testcase classname="tests.controllers_tests.test_user_handlers.TestUserHandler" name="test_login_invalid_credentials" time="0.001" /><testcase classname="tests.controllers_tests.test_user_handlers.TestUserHandler" name="test_get_user_success" time="0.002" /><testcase classname="tests.controllers_tests.test_user_handlers.TestUserHandler" name="test_get_user_not_found" time="0.002" /><testcase classname="tests.controllers_tests.test_user_handlers.TestUserHandler" name="test_get_users_success" time="0.003"><failure message="assert 4008 == 200">self = &lt;tests.controllers_tests.test_user_handlers.TestUserHandler object at 0x10611c9d0&gt;, user_handler = UserHandler(user_service=&lt;Mock id='4401616144'&gt;)
mock_request = &lt;MagicMock spec='Request' id='4401616720'&gt;, sample_users = [&lt;src.app.models.user.User object at 0x1065bc150&gt;, &lt;src.app.models.user.User object at 0x1065bc1d0&gt;]

    @pytest.mark.asyncio
    async def test_get_users_success(self, user_handler, mock_request, sample_users):
        user_handler.user_service.get_users.return_value = sample_users
    
        response = await user_handler.get_users(mock_request)
    
&gt;       assert response["status_code"] == 200
E       assert 4008 == 200

mock_request = &lt;MagicMock spec='Request' id='4401616720'&gt;
response   = {'message': 'Request context not available', 'status_code': 4008}
sample_users = [&lt;src.app.models.user.User object at 0x1065bc150&gt;, &lt;src.app.models.user.User object at 0x1065bc1d0&gt;]
self       = &lt;tests.controllers_tests.test_user_handlers.TestUserHandler object at 0x10611c9d0&gt;
user_handler = UserHandler(user_service=&lt;Mock id='4401616144'&gt;)

tests/controllers_tests/test_user_handlers.py:203: AssertionError</failure></testcase><testcase classname="tests.controllers_tests.test_user_handlers.TestUserHandler" name="test_get_users_database_error" time="0.002"><failure message="assert 4008 == 5003">self = &lt;tests.controllers_tests.test_user_handlers.TestUserHandler object at 0x10611d2d0&gt;, user_handler = UserHandler(user_service=&lt;Mock id='4401573776'&gt;)
mock_request = &lt;MagicMock spec='Request' id='4401573392'&gt;

    @pytest.mark.asyncio
    async def test_get_users_database_error(self, user_handler, mock_request):
        user_handler.user_service.get_users.side_effect = Exception("Database error")
    
        response = await user_handler.get_users(mock_request)
    
&gt;       assert response["status_code"] == DATABASE_OPERATION_ERROR
E       assert 4008 == 5003

mock_request = &lt;MagicMock spec='Request' id='4401573392'&gt;
response   = {'message': 'Request context not available', 'status_code': 4008}
self       = &lt;tests.controllers_tests.test_user_handlers.TestUserHandler object at 0x10611d2d0&gt;
user_handler = UserHandler(user_service=&lt;Mock id='4401573776'&gt;)

tests/controllers_tests/test_user_handlers.py:215: AssertionError</failure></testcase><testcase classname="tests.controllers_tests.test_user_handlers.TestUserHandler" name="test_delete_user_success" time="0.002"><failure message="assert 4008 == 200">self = &lt;tests.controllers_tests.test_user_handlers.TestUserHandler object at 0x10611db90&gt;, user_handler = UserHandler(user_service=&lt;Mock id='4401658960'&gt;)
mock_request = &lt;MagicMock spec='Request' id='4401656720'&gt;

    @pytest.mark.asyncio
    async def test_delete_user_success(self, user_handler, mock_request):
        user_id = "550e8400-e29b-41d4-a716-446655440000"
    
        response = await user_handler.delete_user(mock_request, user_id)
    
&gt;       assert response["status_code"] == 200
E       assert 4008 == 200

mock_request = &lt;MagicMock spec='Request' id='4401656720'&gt;
response   = {'message': 'Request context not available', 'status_code': 4008}
self       = &lt;tests.controllers_tests.test_user_handlers.TestUserHandler object at 0x10611db90&gt;
user_handler = UserHandler(user_service=&lt;Mock id='4401658960'&gt;)
user_id    = '550e8400-e29b-41d4-a716-446655440000'

tests/controllers_tests/test_user_handlers.py:224: AssertionError</failure></testcase><testcase classname="tests.controllers_tests.test_user_handlers.TestUserHandler" name="test_delete_user_not_found" time="0.003"><failure message="assert 4008 == 4101">self = &lt;tests.controllers_tests.test_user_handlers.TestUserHandler object at 0x10611bf90&gt;, user_handler = UserHandler(user_service=&lt;Mock id='4401989456'&gt;)
mock_request = &lt;MagicMock spec='Request' id='4401989264'&gt;

    @pytest.mark.asyncio
    async def test_delete_user_not_found(self, user_handler, mock_request):
        user_id = "550e8400-e29b-41d4-a716-446655440000"
        user_handler.user_service.delete_user_account.side_effect = NotExistsError("User not found")
    
        response = await user_handler.delete_user(mock_request, user_id)
    
&gt;       assert response["status_code"] == USER_NOT_FOUND_ERROR
E       assert 4008 == 4101

mock_request = &lt;MagicMock spec='Request' id='4401989264'&gt;
response   = {'message': 'Request context not available', 'status_code': 4008}
self       = &lt;tests.controllers_tests.test_user_handlers.TestUserHandler object at 0x10611bf90&gt;
user_handler = UserHandler(user_service=&lt;Mock id='4401989456'&gt;)
user_id    = '550e8400-e29b-41d4-a716-446655440000'

tests/controllers_tests/test_user_handlers.py:235: AssertionError</failure></testcase><testcase classname="tests.middleware_tests.test_middleware.TestAuthMiddleware" name="test_expired_token" time="0.002"><failure message="TypeError: auth_middleware() missing 1 required positional argument: 'request'">self = &lt;tests.middleware_tests.test_middleware.TestAuthMiddleware testMethod=test_expired_token&gt;, mock_decode = &lt;MagicMock name='decode_jwt_token' id='4401880784'&gt;

    @patch('src.app.utils.utils.Utils.decode_jwt_token')
    def test_expired_token(self, mock_decode):
        mock_decode.side_effect = jwt.ExpiredSignatureError
        with app.test_request_context(
            '/some/protected/route', headers={'Authorization': 'Bearer expired.token.here'}
        ):
&gt;           response, status_code = auth_middleware()
E           TypeError: auth_middleware() missing 1 required positional argument: 'request'

mock_decode = &lt;MagicMock name='decode_jwt_token' id='4401880784'&gt;
self       = &lt;tests.middleware_tests.test_middleware.TestAuthMiddleware testMethod=test_expired_token&gt;

tests/middleware_tests/test_middleware.py:45: TypeError</failure></testcase><testcase classname="tests.middleware_tests.test_middleware.TestAuthMiddleware" name="test_invalid_authorization_format" time="0.001"><failure message="TypeError: auth_middleware() missing 1 required positional argument: 'request'">self = &lt;tests.middleware_tests.test_middleware.TestAuthMiddleware testMethod=test_invalid_authorization_format&gt;, mock_decode = &lt;MagicMock name='decode_jwt_token' id='4400296336'&gt;

    @patch('src.app.utils.utils.Utils.decode_jwt_token')
    def test_invalid_authorization_format(self, mock_decode):
        with app.test_request_context(
            '/some/protected/route', headers={'Authorization': 'InvalidToken'}
        ):
&gt;           response, status_code = auth_middleware()
E           TypeError: auth_middleware() missing 1 required positional argument: 'request'

mock_decode = &lt;MagicMock name='decode_jwt_token' id='4400296336'&gt;
self       = &lt;tests.middleware_tests.test_middleware.TestAuthMiddleware testMethod=test_invalid_authorization_format&gt;

tests/middleware_tests/test_middleware.py:34: TypeError</failure></testcase><testcase classname="tests.middleware_tests.test_middleware.TestAuthMiddleware" name="test_invalid_token" time="0.001"><failure message="TypeError: auth_middleware() missing 1 required positional argument: 'request'">self = &lt;tests.middleware_tests.test_middleware.TestAuthMiddleware testMethod=test_invalid_token&gt;, mock_decode = &lt;MagicMock name='decode_jwt_token' id='4401934352'&gt;

    @patch('src.app.utils.utils.Utils.decode_jwt_token')
    def test_invalid_token(self, mock_decode):
        mock_decode.side_effect = jwt.InvalidTokenError
        with app.test_request_context(
            '/some/protected/route', headers={'Authorization': 'Bearer invalid.token.here'}
        ):
&gt;           response, status_code = auth_middleware()
E           TypeError: auth_middleware() missing 1 required positional argument: 'request'

mock_decode = &lt;MagicMock name='decode_jwt_token' id='4401934352'&gt;
self       = &lt;tests.middleware_tests.test_middleware.TestAuthMiddleware testMethod=test_invalid_token&gt;

tests/middleware_tests/test_middleware.py:56: TypeError</failure></testcase><testcase classname="tests.middleware_tests.test_middleware.TestAuthMiddleware" name="test_invalid_token_payload" time="0.001"><failure message="TypeError: auth_middleware() missing 1 required positional argument: 'request'">self = &lt;tests.middleware_tests.test_middleware.TestAuthMiddleware testMethod=test_invalid_token_payload&gt;, mock_decode = &lt;MagicMock name='decode_jwt_token' id='4402069072'&gt;

    @patch('src.app.utils.utils.Utils.decode_jwt_token')
    def test_invalid_token_payload(self, mock_decode):
        mock_decode.return_value = {"invalid_key": "value"}
        with app.test_request_context(
            '/some/protected/route', headers={'Authorization': 'Bearer valid.token.here'}
        ):
&gt;           response, status_code = auth_middleware()
E           TypeError: auth_middleware() missing 1 required positional argument: 'request'

mock_decode = &lt;MagicMock name='decode_jwt_token' id='4402069072'&gt;
self       = &lt;tests.middleware_tests.test_middleware.TestAuthMiddleware testMethod=test_invalid_token_payload&gt;

tests/middleware_tests/test_middleware.py:67: TypeError</failure></testcase><testcase classname="tests.middleware_tests.test_middleware.TestAuthMiddleware" name="test_no_authorization_header" time="0.001"><failure message="TypeError: auth_middleware() missing 1 required positional argument: 'request'">self = &lt;tests.middleware_tests.test_middleware.TestAuthMiddleware testMethod=test_no_authorization_header&gt;, mock_decode = &lt;MagicMock name='decode_jwt_token' id='4401648080'&gt;

    @patch('src.app.utils.utils.Utils.decode_jwt_token')
    def test_no_authorization_header(self, mock_decode):
        with app.test_request_context('/some/protected/route'):
&gt;           response, status_code = auth_middleware()
E           TypeError: auth_middleware() missing 1 required positional argument: 'request'

mock_decode = &lt;MagicMock name='decode_jwt_token' id='4401648080'&gt;
self       = &lt;tests.middleware_tests.test_middleware.TestAuthMiddleware testMethod=test_no_authorization_header&gt;

tests/middleware_tests/test_middleware.py:24: TypeError</failure></testcase><testcase classname="tests.middleware_tests.test_middleware.TestAuthMiddleware" name="test_skip_middleware_for_login_signup" time="0.001"><failure message="TypeError: auth_middleware() missing 1 required positional argument: 'request'">self = &lt;tests.middleware_tests.test_middleware.TestAuthMiddleware testMethod=test_skip_middleware_for_login_signup&gt;, mock_decode = &lt;MagicMock name='decode_jwt_token' id='4401577232'&gt;

    @patch('src.app.utils.utils.Utils.decode_jwt_token')
    def test_skip_middleware_for_login_signup(self, mock_decode):
        with app.test_request_context('/login'):
&gt;           response = auth_middleware()
E           TypeError: auth_middleware() missing 1 required positional argument: 'request'

mock_decode = &lt;MagicMock name='decode_jwt_token' id='4401577232'&gt;
self       = &lt;tests.middleware_tests.test_middleware.TestAuthMiddleware testMethod=test_skip_middleware_for_login_signup&gt;

tests/middleware_tests/test_middleware.py:86: TypeError</failure></testcase><testcase classname="tests.middleware_tests.test_middleware.TestAuthMiddleware" name="test_valid_token" time="0.001"><failure message="TypeError: auth_middleware() missing 1 required positional argument: 'request'">self = &lt;tests.middleware_tests.test_middleware.TestAuthMiddleware testMethod=test_valid_token&gt;, mock_decode = &lt;MagicMock name='decode_jwt_token' id='4401616976'&gt;

    @patch('src.app.utils.utils.Utils.decode_jwt_token')
    def test_valid_token(self, mock_decode):
        mock_decode.return_value = {"user_id": "123", "role": "admin"}
        with app.test_request_context(
            '/some/protected/route', headers={'Authorization': 'Bearer valid.token.here'}
        ):
&gt;           response = auth_middleware()
E           TypeError: auth_middleware() missing 1 required positional argument: 'request'

mock_decode = &lt;MagicMock name='decode_jwt_token' id='4401616976'&gt;
self       = &lt;tests.middleware_tests.test_middleware.TestAuthMiddleware testMethod=test_valid_token&gt;

tests/middleware_tests/test_middleware.py:78: TypeError</failure></testcase><testcase classname="tests.repository_tests.test_asset_issue_repository.TestIssueRepository" name="test_fetch_all_issues_empty_list" time="0.003" /><testcase classname="tests.repository_tests.test_asset_issue_repository.TestIssueRepository" name="test_fetch_all_issues_raises_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_asset_issue_repository.TestIssueRepository" name="test_fetch_all_issues_success" time="0.002" /><testcase classname="tests.repository_tests.test_asset_issue_repository.TestIssueRepository" name="test_fetch_user_issues_no_issues_found" time="0.002" /><testcase classname="tests.repository_tests.test_asset_issue_repository.TestIssueRepository" name="test_fetch_user_issues_raises_database_error" time="0.001" /><testcase classname="tests.repository_tests.test_asset_issue_repository.TestIssueRepository" name="test_fetch_user_issues_success" time="0.002" /><testcase classname="tests.repository_tests.test_asset_issue_repository.TestIssueRepository" name="test_report_issue_raises_database_error" time="0.001" /><testcase classname="tests.repository_tests.test_asset_issue_repository.TestIssueRepository" name="test_report_issue_success" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_add_asset_raises_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_add_asset_success" time="0.003" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_assign_asset_raises_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_assign_asset_success" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_check_asset_availability_available" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_check_asset_availability_available_raises_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_check_asset_availability_not_available" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_delete_asset_success" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_delete_asset_success_raises_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_fetch_all_assets_raises_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_fetch_all_assets_success" time="0.003" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_fetch_asset_by_id_not_found" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_fetch_asset_by_id_raises_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_fetch_asset_by_id_success" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_is_asset_assigned_false" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_is_asset_assigned_raises_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_is_asset_assigned_true" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_unassign_asset_raises_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_unassign_asset_success" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_update_asset_status_raises_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_update_asset_status_success" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_view_all_assigned_assets_raises_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_view_all_assigned_assets_success" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_view_assigned_assets_no_assets" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_view_assigned_assets_no_assets_raises_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_asset_repository.TestAssetRepository" name="test_view_assigned_assets_success" time="0.003" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_delete_user_database_error" time="0.024" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_delete_user_not_found" time="0.002" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_delete_user_success" time="0.002" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_fetch_user_by_email_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_fetch_user_by_email_not_found" time="0.002" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_fetch_user_by_email_success" time="0.002" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_fetch_user_by_id_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_fetch_user_by_id_not_found" time="0.003" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_fetch_user_by_id_success" time="0.002" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_fetch_users_database_error" time="0.002" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_fetch_users_empty_list" time="0.002" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_fetch_users_success" time="0.002" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_save_user_database_error" time="0.001" /><testcase classname="tests.repository_tests.test_user_repository.TestUserRepository" name="test_save_user_success" time="0.002" /><testcase classname="tests.service_tests.test_asset_issue_service.TestIssueService" name="test_get_issues_returns_all_issues" time="0.002" /><testcase classname="tests.service_tests.test_asset_issue_service.TestIssueService" name="test_get_user_issues_raises_error_for_nonexistent_user" time="0.002" /><testcase classname="tests.service_tests.test_asset_issue_service.TestIssueService" name="test_get_user_issues_returns_user_specific_issues" time="0.001" /><testcase classname="tests.service_tests.test_asset_issue_service.TestIssueService" name="test_report_issue_raises_error_for_nonexistent_asset" time="0.003"><failure message="TypeError: IssueService.report_issue() missing 1 required positional argument: 'issue'">self = &lt;tests.service_tests.test_asset_issue_service.TestIssueService testMethod=test_report_issue_raises_error_for_nonexistent_asset&gt;

    def test_report_issue_raises_error_for_nonexistent_asset(self):
        # Arrange
        user_id = "user1"
        asset_id = "nonexistent_asset"
        with self.app.test_request_context():
            g.user_id = user_id
    
            issue = Issue(
                asset_id=asset_id,
                description="Test issue description",
                user_id=None,
            )
    
            self.mock_asset_service.get_asset_by_id.return_value = None
    
            # Act &amp; Assert
            with self.assertRaises(NotExistsError) as context:
&gt;               self.issue_service.report_issue(issue)
E               TypeError: IssueService.report_issue() missing 1 required positional argument: 'issue'

asset_id   = 'nonexistent_asset'
context    = &lt;unittest.case._AssertRaisesContext object at 0x10642a3d0&gt;
issue      = Issue()
self       = &lt;tests.service_tests.test_asset_issue_service.TestIssueService testMethod=test_report_issue_raises_error_for_nonexistent_asset&gt;
user_id    = 'user1'

tests/service_tests/test_asset_issue_service.py:149: TypeError</failure></testcase><testcase classname="tests.service_tests.test_asset_issue_service.TestIssueService" name="test_report_issue_raises_error_for_unassigned_asset" time="0.002"><failure message="TypeError: IssueService.report_issue() missing 1 required positional argument: 'issue'">self = &lt;tests.service_tests.test_asset_issue_service.TestIssueService testMethod=test_report_issue_raises_error_for_unassigned_asset&gt;

    def test_report_issue_raises_error_for_unassigned_asset(self):
        # Arrange
        user_id = "user1"
        asset_id = "asset1"
        with self.app.test_request_context():
            g.user_id = user_id
    
            issue = Issue(
                asset_id=asset_id,
                description="Test issue description",
                user_id=None,
            )
    
            self.mock_asset_service.get_asset_by_id.return_value = {"id": asset_id}
            self.mock_asset_service.is_asset_assigned.return_value = False
    
            # Act &amp; Assert
            with self.assertRaises(NotAssignedError) as context:
&gt;               self.issue_service.report_issue(issue)
E               TypeError: IssueService.report_issue() missing 1 required positional argument: 'issue'

asset_id   = 'asset1'
context    = &lt;unittest.case._AssertRaisesContext object at 0x10643ae50&gt;
issue      = Issue()
self       = &lt;tests.service_tests.test_asset_issue_service.TestIssueService testMethod=test_report_issue_raises_error_for_unassigned_asset&gt;
user_id    = 'user1'

tests/service_tests/test_asset_issue_service.py:174: TypeError</failure></testcase><testcase classname="tests.service_tests.test_asset_issue_service.TestIssueService" name="test_report_issue_successful" time="0.002"><failure message="TypeError: IssueService.report_issue() missing 1 required positional argument: 'issue'">self = &lt;tests.service_tests.test_asset_issue_service.TestIssueService testMethod=test_report_issue_successful&gt;

    def test_report_issue_successful(self):
        # Arrange
        user_id = "user1"
        asset_id = "asset1"
        with self.app.test_request_context():
            g.user_id = user_id  # Set user_id in Flask g context
    
            issue = Issue(
                asset_id=asset_id,
                description="Test issue description",
                user_id=None,
            )
    
            self.mock_asset_service.get_asset_by_id.return_value = {"id": asset_id}
            self.mock_asset_service.is_asset_assigned.return_value = True
            self.mock_issue_repository.report_issue.return_value = issue
    
            # Act
&gt;           result = self.issue_service.report_issue(issue)
E           TypeError: IssueService.report_issue() missing 1 required positional argument: 'issue'

asset_id   = 'asset1'
issue      = Issue()
self       = &lt;tests.service_tests.test_asset_issue_service.TestIssueService testMethod=test_report_issue_successful&gt;
user_id    = 'user1'

tests/service_tests/test_asset_issue_service.py:121: TypeError</failure></testcase><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_add_asset_raises_exists_error" time="0.001" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_add_asset_successful" time="0.001" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_assign_asset_raises_asset_not_exists_error" time="0.001" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_assign_asset_raises_user_not_exists_error" time="0.001" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_assign_asset_successful" time="0.002" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_delete_asset_raises_not_exists_error" time="0.001" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_delete_asset_successful" time="0.001" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_get_asset_by_id" time="0.001" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_get_assets" time="0.001" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_is_asset_assigned" time="0.001" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_unassign_asset_raises_not_exists_errors" time="0.001" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_unassign_asset_successful" time="0.002" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_view_all_assigned_assets" time="0.001" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_view_assigned_assets_raises_user_not_exists_error" time="0.001" /><testcase classname="tests.service_tests.test_asset_service.TestAssetService" name="test_view_assigned_assets_successful" time="0.001" /><testcase classname="tests.service_tests.test_user_service.TestUserService" name="test_delete_user_account_nonexistent_user" time="0.001"><failure message="src.app.utils.errors.error.NotExistsError: User does not exist">self = &lt;tests.service_tests.test_user_service.TestUserService testMethod=test_delete_user_account_nonexistent_user&gt;

    def test_delete_user_account_nonexistent_user(self):
        """
        Test delete user account for non-existent user
        """
        # Arrange
        user_id = str(uuid.uuid4())
    
        # Simulate no user found
        self.mock_user_repository.fetch_user_by_id.return_value = None
    
        # Act
&gt;       result = self.user_service.delete_user_account(user_id)

self       = &lt;tests.service_tests.test_user_service.TestUserService testMethod=test_delete_user_account_nonexistent_user&gt;
user_id    = '40858ec1-6644-4d37-8325-5d6557fa213b'

tests/service_tests/test_user_service.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;src.app.services.user_service.UserService object at 0x106485790&gt;, user_id = '40858ec1-6644-4d37-8325-5d6557fa213b'

    def delete_user_account(self, user_id: str) -&gt; bool:
        """
        Delete user account
        - Verify user exists before deletion
        """
        user = self.get_user_by_id(user_id)
        if user:
            return self.user_repository.delete_user(user_id)
&gt;       raise NotExistsError("User does not exist")
E       src.app.utils.errors.error.NotExistsError: User does not exist

self       = &lt;src.app.services.user_service.UserService object at 0x106485790&gt;
user       = None
user_id    = '40858ec1-6644-4d37-8325-5d6557fa213b'

src/app/services/user_service.py:52: NotExistsError</failure></testcase><testcase classname="tests.service_tests.test_user_service.TestUserService" name="test_delete_user_account_successful" time="0.001" /><testcase classname="tests.service_tests.test_user_service.TestUserService" name="test_get_user_by_email_returns_none" time="0.001" /><testcase classname="tests.service_tests.test_user_service.TestUserService" name="test_get_user_by_email_successful" time="0.001" /><testcase classname="tests.service_tests.test_user_service.TestUserService" name="test_get_user_by_id_returns_none" time="0.001" /><testcase classname="tests.service_tests.test_user_service.TestUserService" name="test_get_user_by_id_successful" time="0.001" /><testcase classname="tests.service_tests.test_user_service.TestUserService" name="test_get_users_returns_empty_list" time="0.001" /><testcase classname="tests.service_tests.test_user_service.TestUserService" name="test_get_users_returns_list" time="0.001" /><testcase classname="tests.service_tests.test_user_service.TestUserService" name="test_login_user_raises_invalid_credentials" time="0.001" /><testcase classname="tests.service_tests.test_user_service.TestUserService" name="test_login_user_successful" time="0.239" /><testcase classname="tests.service_tests.test_user_service.TestUserService" name="test_signup_user_raises_user_exists_error" time="0.001" /><testcase classname="tests.service_tests.test_user_service.TestUserService" name="test_signup_user_successful" time="0.001" /><testcase classname="tests.utils.db.test_db_connection" name="test_db_connection" time="0.005" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_delete_multiple_conditions" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_delete_single_condition" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_delete_without_where_clause" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_insert_multiple_columns" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_insert_single_column" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_select_all_columns" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_select_specific_columns" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_select_with_all_parameters" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_select_with_limit" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_select_with_multiple_where_conditions" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_select_with_order_by" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_select_with_where_clause" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_update_multiple_columns" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_update_multiple_where_conditions" time="0.000" /><testcase classname="tests.utils.db.test_query_builder.TestGenericQueryBuilder" name="test_update_single_column" time="0.000" /><testcase classname="tests.utils.test_utils.TestUtils" name="test_admin_decorator_authorized" time="0.002"><failure message="AssertionError: {'status_code': 4008, 'message': 'Request context not available'} != 'Authorized'">self = &lt;tests.utils.test_utils.TestUtils testMethod=test_admin_decorator_authorized&gt;

    def test_admin_decorator_authorized(self):
        """
        Test admin decorator with authorized access
        """
        # Create a Flask app context for testing
        app = Flask(__name__)
        with app.app_context():
            # Set up g with admin role
            g.role = Role.ADMIN.value
    
            # Mock function to be decorated
            @Utils.admin
            def test_function():
                return "Authorized"
    
            # Call the decorated function
            result = test_function()
&gt;           self.assertEqual(result, "Authorized")
E           AssertionError: {'status_code': 4008, 'message': 'Request context not available'} != 'Authorized'

app        = &lt;Flask 'tests.utils.test_utils'&gt;
result     = {'message': 'Request context not available', 'status_code': 4008}
self       = &lt;tests.utils.test_utils.TestUtils testMethod=test_admin_decorator_authorized&gt;
test_function = &lt;function TestUtils.test_admin_decorator_authorized.&lt;locals&gt;.test_function at 0x1063c28e0&gt;

tests/utils/test_utils.py:126: AssertionError</failure></testcase><testcase classname="tests.utils.test_utils.TestUtils" name="test_admin_decorator_unauthorized" time="0.001"><failure message="KeyError: 1">self = &lt;tests.utils.test_utils.TestUtils testMethod=test_admin_decorator_unauthorized&gt;

    def test_admin_decorator_unauthorized(self):
        """
        Test admin decorator with unauthorized access
        """
        # Create a Flask app context for testing
        app = Flask(__name__)
        with app.app_context():
            # Set up g with non-admin role
            g.role = Role.USER.value
    
            # Mock function to be decorated
            @Utils.admin
            def test_function():
                return "Authorized"
    
            # Call the decorated function
            result = test_function()
    
            # Check for unauthorized response
&gt;           self.assertEqual(result[1], 403)
E           KeyError: 1

app        = &lt;Flask 'tests.utils.test_utils'&gt;
result     = {'message': 'Request context not available', 'status_code': 4008}
self       = &lt;tests.utils.test_utils.TestUtils testMethod=test_admin_decorator_unauthorized&gt;
test_function = &lt;function TestUtils.test_admin_decorator_unauthorized.&lt;locals&gt;.test_function at 0x1063e0ea0&gt;

tests/utils/test_utils.py:147: KeyError</failure></testcase><testcase classname="tests.utils.test_utils.TestUtils" name="test_check_password_failure" time="0.473" /><testcase classname="tests.utils.test_utils.TestUtils" name="test_check_password_success" time="0.506" /><testcase classname="tests.utils.test_utils.TestUtils" name="test_create_jwt_token_exception" time="0.001" /><testcase classname="tests.utils.test_utils.TestUtils" name="test_create_jwt_token_success" time="0.000" /><testcase classname="tests.utils.test_utils.TestUtils" name="test_decode_jwt_token_expired" time="0.001" /><testcase classname="tests.utils.test_utils.TestUtils" name="test_decode_jwt_token_invalid" time="0.000" /><testcase classname="tests.utils.test_utils.TestUtils" name="test_decode_jwt_token_success" time="0.000" /><testcase classname="tests.utils.test_utils.TestUtils" name="test_hash_password_unique" time="0.475" /><testcase classname="tests.utils.validators.test_validators.TestValidators" name="test_is_department_valid" time="0.001" /><testcase classname="tests.utils.validators.test_validators.TestValidators" name="test_is_email_valid" time="0.000" /><testcase classname="tests.utils.validators.test_validators.TestValidators" name="test_is_name_valid" time="0.000" /><testcase classname="tests.utils.validators.test_validators.TestValidators" name="test_is_password_valid" time="0.000" /><testcase classname="tests.utils.validators.test_validators.TestValidators" name="test_is_valid_UUID" time="0.000" /></testsuite></testsuites>